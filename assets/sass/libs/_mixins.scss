// Colors for Buttons
@mixin button-color($color){
  background: $color;
  &:hover {
    background: darken($color, 10%);
  }
  &.outline {
    color: $color;
    border-color: $color;
    .genericon { color: $color; }
    &:hover {
      background: $color !important;
    }
  }

  // Gray Button Styles
  @if ($color == $white) {
    color: $dark-gray;
    .genericon { color: $dark-gray; }

    &:hover {
      color: $dark-gray;
      .genericon { color: $dark-gray; }
    }
  }
}


// Ease
@mixin ease($time:333ms, $el: all, $anim: ease-in-out) {
	transition: $el $time $anim;
}




// Responsive
@mixin breakpoint($name) {
      @if map-has-key($breakpoints, $name) {
        @media #{inspect(map-get($breakpoints, $name))} {
      @content;
    }
  }
  @else {
    @warn "Couldn't find a breakpoint named `#{$name}`.";
  }
}



// Vertical Alignment
@mixin vertical-align {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}


// Background Images
@mixin background-image($attachment: fixed) {
  background-size: cover !important;
  background-position: center !important;
  background-repeat: no-repeat !important;
  background-attachment: $attachment !important;

  // Attachment scroll on mobile and unsupported browsers
  html.touch & { background-attachment: scroll !important; }
}






// Ultimate rem Mixin
// http://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/
@function parseInt($n) {
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
  $px : ();
  $rem: ();

  @each $value in $values {

    @if $value == 0 or $value == auto {
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);
      $val: parseInt($value);

      @if $unit == "px" {
        $px : append($px,  $value);
        $rem: append($rem, ($val / 10 + rem));
      }

      @if $unit == "rem" {
        $px : append($px,  ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}




// Override Webkit
@mixin no-webkit {
  -moz-appearance: none;
  -webkit-appearance: none;
  appearance: none;
  outline: none;
  border: none;
  box-shadow: none;

  &:focus, &:active {
    -moz-appearance: none;
    -webkit-appearance: none;
    appearance: none;
    outline: none;
    border: none;
    box-shadow: none;
  }
}



// Placeholders
@mixin placeholder($color) {
	::-webkit-input-placeholder { color: $color; }
	:-moz-placeholder { color: $color; }
	::-moz-placeholder { color: $color; }
	:-ms-input-placeholder { color: $color; }
}






@mixin word-wrap {
  white-space: pre-wrap;
  white-space: -moz-pre-wrap;
  white-space: -pre-wrap;
  white-space: -o-pre-wrap;
  word-wrap: break-word;
}